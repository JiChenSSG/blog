<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Debian配置</title>
    <link href="/blog/2023/01/08/Debian%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/Debian%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="debian基本配置-个人用"><a href="#debian基本配置-个人用" class="headerlink" title="debian基本配置 - 个人用"></a>debian基本配置 - 个人用</h1><h2 id="配置root密码"><a href="#配置root密码" class="headerlink" title="配置root密码"></a>配置root密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo passwd root<br></code></pre></td></tr></table></figure><h2 id="配置sudoer"><a href="#配置sudoer" class="headerlink" title="配置sudoer"></a>配置sudoer</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;jichen  ALL=(ALL) NOPASSWD:ALL&quot;</span> | <span class="hljs-built_in">tee</span> /etc/sudoers.d/jichen<br></code></pre></td></tr></table></figure><h2 id="临时代理安装wget、curl、git"><a href="#临时代理安装wget、curl、git" class="headerlink" title="临时代理安装wget、curl、git"></a>临时代理安装wget、curl、git</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install wget<br>sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install curl<br>sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install git<br></code></pre></td></tr></table></figure><h2 id="本地代理-wsl"><a href="#本地代理-wsl" class="headerlink" title="本地代理(wsl)"></a>本地代理(wsl)</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 备份</span><br><span class="hljs-built_in">cp</span> ~/.bashrc ~/.bashrc.bak<br><br><span class="hljs-comment"># 删除注释</span><br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br><br>sed -i <span class="hljs-string">&#x27;1i export ALL_PROXY=&quot;socks5://192.168.50.1:7890/&quot;&#x27;</span> ~/.bashrc<br><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="生成sshkey"><a href="#生成sshkey" class="headerlink" title="生成sshkey"></a>生成sshkey</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -C <span class="hljs-string">&quot;yiyu.zhu@qq.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="测试代理"><a href="#测试代理" class="headerlink" title="测试代理"></a>测试代理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://www.google.com<br></code></pre></td></tr></table></figure><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><h3 id="用户名、邮箱"><a href="#用户名、邮箱" class="headerlink" title="用户名、邮箱"></a>用户名、邮箱</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;jichen&quot;</span> <br>git config --global user.email 1286856721@qq.com<br></code></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global http.proxy socks5://192.168.50.1:7890<br>git config --global https.proxy socks5://192.168.50.1:7890<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Host github.com</span><br><span class="hljs-string">    User git</span><br><span class="hljs-string">    ProxyCommand nc -v -x 192.168.50.1:7890:7890 %h %p&quot;</span> | <span class="hljs-built_in">tee</span> ~/.ssh/config<br></code></pre></td></tr></table></figure><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份</span><br>sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/sources.list -O /etc/apt/sources.list<br><br><span class="hljs-comment"># 清空缓存</span><br>sudo apt-get clean<br>sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install openssh-client<br>sudo apt-get install openssh-server<br><br>sudo apt-get install lsof<br></code></pre></td></tr></table></figure><h2 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get purge vim-common<br>sudo apt-get update<br>sudo apt-get upgrade<br>sudo apt-get install vim<br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/.vimrc -O ~/.vimrc<br></code></pre></td></tr></table></figure><h2 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install zsh<br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class="hljs-comment"># 安装插件</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br><br><span class="hljs-comment"># 更新代理</span><br><span class="hljs-built_in">touch</span> ~/.zshrc<br>sed -i <span class="hljs-string">&#x27;1i export ALL_PROXY=&quot;socks5://172.27.112.1:7890/&quot;&#x27;</span> ~/.zshrc<br><br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 获取配置</span><br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/.zshrc -O ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Debian</tag>
      
      <tag>Linux</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/01/07/hello-world/"/>
    <url>/blog/2023/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>硬盘读取(1)--CHS模式</title>
    <link href="/blog/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>硬盘读取大体分为三个模式，CHS、LBA24和LBA48，本文主要介绍CHS模式的工作方式。</p><p>CHS三个字母代表磁头（Heads）、柱面(Cylinder)、扇区(Sector)，即通过告知CPU磁头号、柱面号、扇区号，即可获取到硬盘上的数据。</p><p>硬盘解构示意图：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/%E7%A1%AC%E7%9B%98%E7%BB%93%E6%9E%84.png" alt="硬盘结构示意图"></p><p>在此模式下可以较为容易的访问硬盘中的数据。</p><h1 id="x86下的读盘方式"><a href="#x86下的读盘方式" class="headerlink" title="x86下的读盘方式"></a>x86下的读盘方式</h1><p>在Intel的中断表中，我们可以查询到有关硬盘操作的终端为INT13，其中有关读盘的部分为：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/INT13,2.png" alt="INT13,2"></p><p>通过上表可知，我们使<code>AH=0x02,AL=读入磁道数,CH=柱面号,CL=磁道号,DH=磁头号,DL=盘号</code>，然后调用0x13号中断，即可向<code>ES:BX</code>指向的位置连续写入数据。其中扇区号、柱面号、磁头号都是从0编号。在调用INT 0x13后会在CF返回一个状态信息，0为成功，1为失败。</p><p>以下代码展示了在0号柱面0号扇区0号磁头位置，读取4个磁道的数据至0x0900:0x0200的位置。（采用AT&amp;T语法非Intel语法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gas">_loadDemo:<br>mov $0x0000, %dx <br>mov $0x0002, %cx<br>mov $0x900, %ax<br>mov %ax, %es<br>mov $0x0200, %bx<br>mov $0x02, %ah<br>mov $0x04, %al<br>_readDemo:<br>int $0x13<br>jnc _demoLoadOk//读取直到成功<br>//...<br></code></pre></td></tr></table></figure><h1 id="CHS的缺点"><a href="#CHS的缺点" class="headerlink" title="CHS的缺点"></a>CHS的缺点</h1><p>CHS语法在目前已不适用于大多数机器，可以发现磁头数最大为 256 ，柱面数最大为 1024，扇区数最大为63 。可以访问的最大容量为：</p><p>256 * 1024 * 63 * 512 &#x2F; 1048576 &#x3D; 8064 MB</p><p>不到8G的硬盘访问很难支持现在市场上的大部分设备，因此在现在的设计中CHS已被废弃，但考虑到兼容性还是保留了这一种访问方式。</p><p>在之后将介绍支持更大硬盘容量访问的LBA24和LBA48。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h6 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h6><p><a href="https://stanislavs.org/helppc/int_table.html">1.https://stanislavs.org/helppc/int_table.html</a></p><p><a href="https://en.wikipedia.org/wiki/Cylinder-head-sector">2.https://en.wikipedia.org/wiki/Cylinder-head-sector</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>x86汇编</tag>
      
      <tag>硬件交互</tag>
      
      <tag>硬盘读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
