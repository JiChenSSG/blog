<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/07/hello-world/"/>
    <url>/2023/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>硬盘读取(1)--CHS模式</title>
    <link href="/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>硬盘读取大体分为三个模式，CHS、LBA24和LBA48，本文主要介绍CHS模式的工作方式。</p><p>CHS三个字母代表磁头（Heads）、柱面(Cylinder)、扇区(Sector)，即通过告知CPU磁头号、柱面号、扇区号，即可获取到硬盘上的数据。</p><p>硬盘解构示意图：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/%E7%A1%AC%E7%9B%98%E7%BB%93%E6%9E%84.png" alt="硬盘结构示意图"></p><p>在此模式下可以较为容易的访问硬盘中的数据。</p><h1 id="x86下的读盘方式"><a href="#x86下的读盘方式" class="headerlink" title="x86下的读盘方式"></a>x86下的读盘方式</h1><p>在Intel的中断表中，我们可以查询到有关硬盘操作的终端为INT13，其中有关读盘的部分为：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/INT13,2.png" alt="INT13,2"></p><p>通过上表可知，我们使<code>AH=0x02,AL=读入磁道数,CH=柱面号,CL=磁道号,DH=磁头号,DL=盘号</code>，然后调用0x13号中断，即可向<code>ES:BX</code>指向的位置连续写入数据。其中扇区号、柱面号、磁头号都是从0编号。在调用INT 0x13后会在CF返回一个状态信息，0为成功，1为失败。</p><p>以下代码展示了在0号柱面0号扇区0号磁头位置，读取4个磁道的数据至0x0900:0x0200的位置。（采用AT&amp;T语法非Intel语法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gas">_loadDemo:<br>mov $0x0000, %dx <br>mov $0x0002, %cx<br>mov $0x900, %ax<br>mov %ax, %es<br>mov $0x0200, %bx<br>mov $0x02, %ah<br>mov $0x04, %al<br>_readDemo:<br>int $0x13<br>jnc _demoLoadOk//读取直到成功<br>//...<br></code></pre></td></tr></table></figure><h1 id="CHS的缺点"><a href="#CHS的缺点" class="headerlink" title="CHS的缺点"></a>CHS的缺点</h1><p>CHS语法在目前已不适用于大多数机器，可以发现磁头数最大为 256 ，柱面数最大为 1024，扇区数最大为63 。可以访问的最大容量为：</p><p>256 * 1024 * 63 * 512 &#x2F; 1048576 &#x3D; 8064 MB</p><p>不到8G的硬盘访问很难支持现在市场上的大部分设备，因此在现在的设计中CHS已被废弃，但考虑到兼容性还是保留了这一种访问方式。</p><p>在之后将介绍支持更大硬盘容量访问的LBA24和LBA48。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h6 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h6><p><a href="https://stanislavs.org/helppc/int_table.html">1.https://stanislavs.org/helppc/int_table.html</a></p><p><a href="https://en.wikipedia.org/wiki/Cylinder-head-sector">2.https://en.wikipedia.org/wiki/Cylinder-head-sector</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>x86汇编</tag>
      
      <tag>硬件交互</tag>
      
      <tag>硬盘读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
