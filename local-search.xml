<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>wsl踩坑大合集 - 01</title>
    <link href="/blog/2023/01/11/wsl%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86%20-%2001/"/>
    <url>/blog/2023/01/11/wsl%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86%20-%2001/</url>
    
    <content type="html"><![CDATA[<h1 id="wsl踩坑大合集"><a href="#wsl踩坑大合集" class="headerlink" title="wsl踩坑大合集"></a>wsl踩坑大合集</h1><p><del>wsl就是坨屎</del></p><p>重启wsl，找遍全网没看到别的解决方法，大概1-2个月会出现一次</p>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Linux</tag>
      
      <tag>开发</tag>
      
      <tag>网络</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs 安装&amp;配置</title>
    <link href="/blog/2023/01/08/nodejs-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/nodejs-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="nodejs-安装-amp-配置"><a href="#nodejs-安装-amp-配置" class="headerlink" title="nodejs 安装 &amp; 配置"></a>nodejs 安装 &amp; 配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 压缩包安装</span><br>wget https://nodejs.org/dist/v18.13.0/node-v18.13.0-linux-x64.tar.xz<br><br>tar -xvf node-v18.13.0-linux-x64.tar.xz<br><span class="hljs-built_in">rm</span> node-v18.13.0-linux-x64.tar.xz<br><span class="hljs-built_in">mv</span> node-v18.13.0-linux-x64 node<br><br><span class="hljs-comment"># 修复问题 zsh: /mnt/d/nodejs//npm: bad interpreter: /bin/sh^M: no such file or directory</span><br>sed -i <span class="hljs-string">&quot;1i export PATH=<span class="hljs-subst">$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>&quot;</span> | sed -e &#x27;s/:\/mnt[^:]*//g&#x27;)</span> # strip out problematic Windows %PATH%&quot;</span> ~/.zshrc<br><br><span class="hljs-comment"># 修改安装路径</span><br><span class="hljs-built_in">mkdir</span> -p ~/npmInstall/node_global<br><span class="hljs-built_in">mkdir</span> -p ~/npmInstall/node_cache<br><br>npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;~/npmInstall/node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;~/npmInstall/node_cache&quot;</span><br><br><span class="hljs-comment"># 配置淘宝镜像</span><br>npm config <span class="hljs-built_in">set</span> registry http://registry.npmmirror.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Linux</tag>
      
      <tag>开发</tag>
      
      <tag>nodejs</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wsl 配置</title>
    <link href="/blog/2023/01/08/Wsl-%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/Wsl-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="wsl2配置"><a href="#wsl2配置" class="headerlink" title="wsl2配置"></a>wsl2配置</h1><h2 id="局域网访问"><a href="#局域网访问" class="headerlink" title="局域网访问"></a>局域网访问</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># windows防火墙规则开启端口<br><br># 映射<br>netsh interface portproxy add v4tov4 listenport=<span class="hljs-number">22</span> listenaddress=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> connectport=<span class="hljs-number">22</span> connectaddress=$&#123;wsl2地址&#125;<br></code></pre></td></tr></table></figure><h2 id="固定ip"><a href="#固定ip" class="headerlink" title="固定ip"></a>固定ip</h2><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ssh">sudo ip addr del $(ip addr show eth0 | grep &#x27;inet\b&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | head -n 1) dev eth0<br>sudo ip addr add 192.168.50.2/24 broadcast 192.168.50.255 dev eth0<br>sudo ip route add 0.0.0.0/0 via 192.168.50.1 dev eth0<br>sudo echo nameserver 192.168.50.1 &gt; /etc/resolv.conf<br></code></pre></td></tr></table></figure><h3 id="windows-11"><a href="#windows-11" class="headerlink" title="windows(11)"></a>windows(11)</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Get-NetAdapter -IncludeHidden -Name &#x27;vEthernet (WSL)&#x27; | Get-NetIPAddress |Remove-NetIPAddress -Confirm:$False<br>New-NetIPAddress -IPAddress <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">1</span> -PrefixLength <span class="hljs-number">24</span> -InterfaceAlias &#x27;vEthernet (WSL)&#x27;<br>Get-NetNat | ? Name -Eq WSLNat | Remove-NetNat -Confirm:$False<br>New-NetNat -Name WSLNat -InternalIPInterfaceAddressPrefix <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>;<br></code></pre></td></tr></table></figure><h3 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wsl -d Debian -u root ip addr <span class="hljs-built_in">del</span> $(ip addr show eth0 ^| grep &#x27;inet\b&#x27; ^| awk &#x27;&#123;<span class="hljs-built_in">print</span> $<span class="hljs-number">2</span>&#125;&#x27; ^| head -n <span class="hljs-number">1</span>) dev eth0<br>wsl -d Debian -u root ip addr add <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">2</span>/<span class="hljs-number">24</span> broadcast <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">255</span> dev eth0<br>wsl -d Debian -u root ip route add <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">0</span> via <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">1</span> dev eth0<br>wsl -d Debian -u root <span class="hljs-built_in">echo</span> nameserver <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">1</span> ^&gt; /etc/resolv.conf<br>powershell -c &quot;Get-NetAdapter -IncludeHidden -Name &#x27;vEthernet (WSL)&#x27; | Get-NetIPAddress |Remove-NetIPAddress -Confirm:$False; New-NetIPAddress -IPAddress <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">1</span> -PrefixLength <span class="hljs-number">24</span> -InterfaceAlias &#x27;vEthernet (WSL)&#x27;; Get-NetNat | ? Name -Eq WSLNat | Remove-NetNat -Confirm:$False; New-NetNat -Name WSLNat -InternalIPInterfaceAddressPrefix <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">50</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>;&quot;<br></code></pre></td></tr></table></figure><h3 id="脚本开机自启"><a href="#脚本开机自启" class="headerlink" title="脚本开机自启"></a>脚本开机自启</h3><p>win + R 开启 shell:startup<br>将脚本放入</p><h3 id="防止wsl自动更新ip"><a href="#防止wsl自动更新ip" class="headerlink" title="防止wsl自动更新ip"></a>防止wsl自动更新ip</h3><p>由于WSL2默认&#x2F;etc&#x2F;hosts每次重启会自动改变,需要添加&#x2F;etc&#x2F;wsl.conf,内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[network]</span> <br><span class="hljs-attr">generateHosts</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Windows</tag>
      
      <tag>网络</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 安装&amp;配置</title>
    <link href="/blog/2023/01/08/Hexo-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/Hexo-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-安装-amp-配置"><a href="#hexo-安装-amp-配置" class="headerlink" title="hexo 安装 &amp; 配置"></a>hexo 安装 &amp; 配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 全局安装hexo</span><br>npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加环境变量 ~/npmInstall/node_global/lib/node_modules/hexo-cli/bin</span><br><br><span class="hljs-comment"># # 安装hexo fuild主题</span><br><span class="hljs-comment"># npm install --save hexo-theme-fluid</span><br><br></code></pre></td></tr></table></figure><p><em>使用npm安装fluid主题，配置文件在node_moudles中，不便于管理，故使用fork + git clone进行主题管理</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git@github.com:jiChen-DG/hexo-theme-fluid.git ./themes/fluid<br></code></pre></td></tr></table></figure><hr><p><a href="https://hexo.fluid-dev.com/docs/">fluid基础配置</a></p>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Linux</tag>
      
      <tag>开发</tag>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoLang配置</title>
    <link href="/blog/2023/01/08/GoLang%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/GoLang%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="GoLang配置"><a href="#GoLang配置" class="headerlink" title="GoLang配置"></a>GoLang配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://go.dev/dl/</span><br>sudo tar -C /usr/local -xzf go1.19.4.linux-amd64.tar.gz<br>tar -C /usr/local -xzf go1.19.4.linux-amd64.tar.gz<br><br>sed -i <span class="hljs-string">&#x27;1i export PATH=$PATH:/usr/local/go/bin&#x27;</span> ~/.zshrc<br><br><span class="hljs-comment"># 解决vscode安装go tools失败</span><br>go <span class="hljs-built_in">env</span> -w GO111MODULE=on<br>go <span class="hljs-built_in">env</span> -w GOPROXY=https://goproxy.io,direct<br><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Linux</tag>
      
      <tag>系统</tag>
      
      <tag>GoLang</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian配置</title>
    <link href="/blog/2023/01/08/Debian%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2023/01/08/Debian%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="debian基本配置-个人用"><a href="#debian基本配置-个人用" class="headerlink" title="debian基本配置 - 个人用"></a>debian基本配置 - 个人用</h1><h2 id="配置root密码"><a href="#配置root密码" class="headerlink" title="配置root密码"></a>配置root密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo passwd root<br></code></pre></td></tr></table></figure><h2 id="配置sudoer"><a href="#配置sudoer" class="headerlink" title="配置sudoer"></a>配置sudoer</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;jichen  ALL=(ALL) NOPASSWD:ALL&quot;</span> | <span class="hljs-built_in">tee</span> /etc/sudoers.d/jichen<br></code></pre></td></tr></table></figure><h2 id="临时代理安装wget、curl、git"><a href="#临时代理安装wget、curl、git" class="headerlink" title="临时代理安装wget、curl、git"></a>临时代理安装wget、curl、git</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install wget<br>sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install curl<br>sudo apt-get -o Acquire::http::proxy=<span class="hljs-string">&quot;http://172.27.112.1:7890/&quot;</span> install git<br></code></pre></td></tr></table></figure><h2 id="本地代理-wsl"><a href="#本地代理-wsl" class="headerlink" title="本地代理(wsl)"></a>本地代理(wsl)</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 备份</span><br><span class="hljs-built_in">cp</span> ~/.bashrc ~/.bashrc.bak<br><br><span class="hljs-comment"># 删除注释</span><br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br>sed -i <span class="hljs-string">&#x27;1d&#x27;</span> ~/.bashrc<br><br>sed -i <span class="hljs-string">&#x27;1i export ALL_PROXY=&quot;socks5://192.168.50.1:7890/&quot;&#x27;</span> ~/.bashrc<br><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="生成sshkey"><a href="#生成sshkey" class="headerlink" title="生成sshkey"></a>生成sshkey</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -C <span class="hljs-string">&quot;yiyu.zhu@qq.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="测试代理"><a href="#测试代理" class="headerlink" title="测试代理"></a>测试代理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://www.google.com<br></code></pre></td></tr></table></figure><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><h3 id="用户名、邮箱"><a href="#用户名、邮箱" class="headerlink" title="用户名、邮箱"></a>用户名、邮箱</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;jichen&quot;</span> <br>git config --global user.email 1286856721@qq.com<br></code></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global http.proxy socks5://192.168.50.1:7890<br>git config --global https.proxy socks5://192.168.50.1:7890<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Host github.com</span><br><span class="hljs-string">    User git</span><br><span class="hljs-string">    ProxyCommand nc -v -x 192.168.50.1:7890:7890 %h %p&quot;</span> | <span class="hljs-built_in">tee</span> ~/.ssh/config<br></code></pre></td></tr></table></figure><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#备份</span><br>sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/sources.list -O /etc/apt/sources.list<br><br><span class="hljs-comment"># 清空缓存</span><br>sudo apt-get clean<br>sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install openssh-client<br>sudo apt-get install openssh-server<br><br>sudo apt-get install lsof<br></code></pre></td></tr></table></figure><h2 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get purge vim-common<br>sudo apt-get update<br>sudo apt-get upgrade<br>sudo apt-get install vim<br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/.vimrc -O ~/.vimrc<br></code></pre></td></tr></table></figure><h2 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install zsh<br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class="hljs-comment"># 安装插件</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br><br><span class="hljs-comment"># 更新代理</span><br><span class="hljs-built_in">touch</span> ~/.zshrc<br>sed -i <span class="hljs-string">&#x27;1i export ALL_PROXY=&quot;socks5://172.27.112.1:7890/&quot;&#x27;</span> ~/.zshrc<br><br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 获取配置</span><br>sudo wget https://raw.githubusercontent.com/jiChen-DG/setting-code/master/.zshrc -O ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Debian</tag>
      
      <tag>Linux</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/01/07/hello-world/"/>
    <url>/blog/2023/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>硬盘读取(1)--CHS模式</title>
    <link href="/blog/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/11/18/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>硬盘读取大体分为三个模式，CHS、LBA24和LBA48，本文主要介绍CHS模式的工作方式。</p><p>CHS三个字母代表磁头（Heads）、柱面(Cylinder)、扇区(Sector)，即通过告知CPU磁头号、柱面号、扇区号，即可获取到硬盘上的数据。</p><p>硬盘解构示意图：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/%E7%A1%AC%E7%9B%98%E7%BB%93%E6%9E%84.png" alt="硬盘结构示意图"></p><p>在此模式下可以较为容易的访问硬盘中的数据。</p><h1 id="x86下的读盘方式"><a href="#x86下的读盘方式" class="headerlink" title="x86下的读盘方式"></a>x86下的读盘方式</h1><p>在Intel的中断表中，我们可以查询到有关硬盘操作的终端为INT13，其中有关读盘的部分为：</p><p><img src="http://jichen-blog.oss-cn-beijing.aliyuncs.com/%E7%A1%AC%E7%9B%98%E8%AF%BB%E5%8F%96-1-CHS%E6%A8%A1%E5%BC%8F/INT13,2.png" alt="INT13,2"></p><p>通过上表可知，我们使<code>AH=0x02,AL=读入磁道数,CH=柱面号,CL=磁道号,DH=磁头号,DL=盘号</code>，然后调用0x13号中断，即可向<code>ES:BX</code>指向的位置连续写入数据。其中扇区号、柱面号、磁头号都是从0编号。在调用INT 0x13后会在CF返回一个状态信息，0为成功，1为失败。</p><p>以下代码展示了在0号柱面0号扇区0号磁头位置，读取4个磁道的数据至0x0900:0x0200的位置。（采用AT&amp;T语法非Intel语法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gas">_loadDemo:<br>mov $0x0000, %dx <br>mov $0x0002, %cx<br>mov $0x900, %ax<br>mov %ax, %es<br>mov $0x0200, %bx<br>mov $0x02, %ah<br>mov $0x04, %al<br>_readDemo:<br>int $0x13<br>jnc _demoLoadOk//读取直到成功<br>//...<br></code></pre></td></tr></table></figure><h1 id="CHS的缺点"><a href="#CHS的缺点" class="headerlink" title="CHS的缺点"></a>CHS的缺点</h1><p>CHS语法在目前已不适用于大多数机器，可以发现磁头数最大为 256 ，柱面数最大为 1024，扇区数最大为63 。可以访问的最大容量为：</p><p>256 * 1024 * 63 * 512 &#x2F; 1048576 &#x3D; 8064 MB</p><p>不到8G的硬盘访问很难支持现在市场上的大部分设备，因此在现在的设计中CHS已被废弃，但考虑到兼容性还是保留了这一种访问方式。</p><p>在之后将介绍支持更大硬盘容量访问的LBA24和LBA48。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h6 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h6><p><a href="https://stanislavs.org/helppc/int_table.html">1.https://stanislavs.org/helppc/int_table.html</a></p><p><a href="https://en.wikipedia.org/wiki/Cylinder-head-sector">2.https://en.wikipedia.org/wiki/Cylinder-head-sector</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>x86汇编</tag>
      
      <tag>硬件交互</tag>
      
      <tag>硬盘读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
